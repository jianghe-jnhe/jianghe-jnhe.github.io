{"meta":{"title":"Jnhe","subtitle":"","description":"","author":"Jnhe","url":"https://jianghe-jnhe.github.io","root":"/"},"pages":[],"posts":[{"title":"HC32F460JEUA-第2篇","slug":"HC32F460JEUA-第2篇","date":"2023-12-14T09:00:18.000Z","updated":"2023-12-17T08:21:26.724Z","comments":true,"path":"2023/12/14/HC32F460JEUA-第2篇/","permalink":"https://jianghe-jnhe.github.io/2023/12/14/HC32F460JEUA-%E7%AC%AC2%E7%AF%87/","excerpt":"","text":"我的工程","categories":[],"tags":[]},{"title":"HC32F460JEUA-第1篇","slug":"HC32F460JEUA-第1篇","date":"2023-12-12T09:21:40.000Z","updated":"2023-12-14T13:14:39.118Z","comments":true,"path":"2023/12/12/HC32F460JEUA-第1篇/","permalink":"https://jianghe-jnhe.github.io/2023/12/12/HC32F460JEUA-%E7%AC%AC1%E7%AF%87/","excerpt":"","text":"KEY 原理图 配置 输入 上拉 12345678910111213141516171819202122232425262728293031323334353637383940414243//Port Configstatic void App_PortCfg(void)&#123; /* GPIO initialize */ stc_gpio_init_t stcGpioInit; /* PH0 set to XTAL-IN */ (void)GPIO_StructInit(&amp;stcGpioInit); stcGpioInit.u16PinAttr = PIN_ATTR_ANALOG; (void)GPIO_Init(GPIO_PORT_H, GPIO_PIN_00, &amp;stcGpioInit); /* PH1 set to XTAL-OUT */ (void)GPIO_StructInit(&amp;stcGpioInit); stcGpioInit.u16PinAttr = PIN_ATTR_ANALOG; (void)GPIO_Init(GPIO_PORT_H, GPIO_PIN_01, &amp;stcGpioInit); /* PA0 set to GPIO-Output */ (void)GPIO_StructInit(&amp;stcGpioInit); stcGpioInit.u16PinDir = PIN_DIR_OUT; stcGpioInit.u16PinAttr = PIN_ATTR_DIGITAL; (void)GPIO_Init(GPIO_PORT_A, GPIO_PIN_00, &amp;stcGpioInit); /******** KEY_GPIO *********/ /* PC13 set to GPIO-Input */ (void)GPIO_StructInit(&amp;stcGpioInit); stcGpioInit.u16PinDir = PIN_DIR_IN; stcGpioInit.u16PullUp = PIN_PU_ON; stcGpioInit.u16PinAttr = PIN_ATTR_DIGITAL; (void)GPIO_Init(GPIO_PORT_C, GPIO_PIN_13, &amp;stcGpioInit); /***************************/ /* PA1 set to GPIO-Output */ (void)GPIO_StructInit(&amp;stcGpioInit); stcGpioInit.u16PinDir = PIN_DIR_OUT; stcGpioInit.u16PinAttr = PIN_ATTR_DIGITAL; (void)GPIO_Init(GPIO_PORT_A, GPIO_PIN_01, &amp;stcGpioInit); /* PA2 set to GPIO-Output */ (void)GPIO_StructInit(&amp;stcGpioInit); stcGpioInit.u16PinDir = PIN_DIR_OUT; stcGpioInit.u16PinAttr = PIN_ATTR_DIGITAL; (void)GPIO_Init(GPIO_PORT_A, GPIO_PIN_02, &amp;stcGpioInit);&#125; 逻辑 电平检测：按下-&gt;低电平 按键扫描 12345678910111213141516171819202122232425262728293031/** * @brief Main function of the project * @param None * @retval int32_t return value, if needed */int32_t main(void)&#123; /* Register write unprotected for some required peripherals. */ LL_PERIPH_WE(LL_PERIPH_ALL); //Clock Config App_ClkCfg(); //Port Config App_PortCfg(); /* Register write protected for some required peripherals. */ LL_PERIPH_WP(LL_PERIPH_ALL); GPIO_SetPins(GPIO_PORT_C, GPIO_PIN_13); GPIO_SetPins(GPIO_PORT_A, GPIO_PIN_00); GPIO_SetPins(GPIO_PORT_A, GPIO_PIN_01); GPIO_SetPins(GPIO_PORT_A, GPIO_PIN_02); for (;;) &#123; if(GPIO_ReadInputPins(GPIO_PORT_C, GPIO_PIN_13) == 0) &#123; GPIO_ResetPins(GPIO_PORT_A, GPIO_PIN_01); &#125; else &#123; GPIO_SetPins(GPIO_PORT_A, GPIO_PIN_01); &#125; &#125;&#125; Systick 配置时钟的时候，Systick的基本配置默认已经被配置好了 …\\Firmware\\01_KEY\\MDK\\driver\\src\\hc32_ll_utility.c 配置 参考：…\\HC32F460_DDL_Rev3.2.0\\projects\\ev_hc32f460_lqfp100_v2\\examples\\systick\\systick_int 中断函数 12345678910111213// main函数之前声明/** * @brief SysTick interrupt handler function. * @param None * @retval None */void SysTick_Handler(void)&#123; SysTick_IncTick(); __DSB(); /* Arm Errata 838869 */&#125; 初始化 12345678910111213141516171819202122232425262728293031/** * @brief Main function of the project * @param None * @retval int32_t return value, if needed */int32_t main(void)&#123; /* Register write unprotected for some required peripherals. */ LL_PERIPH_WE(LL_PERIPH_ALL); //Clock Config App_ClkCfg(); //Port Config App_PortCfg(); (void)SysTick_Init(1000U); /* Register write protected for some required peripherals. */ LL_PERIPH_WP(LL_PERIPH_ALL); GPIO_SetPins(GPIO_PORT_C, GPIO_PIN_13); GPIO_SetPins(GPIO_PORT_A, GPIO_PIN_00); GPIO_SetPins(GPIO_PORT_A, GPIO_PIN_01); GPIO_SetPins(GPIO_PORT_A, GPIO_PIN_02); for (;;) &#123; GPIO_ResetPins(GPIO_PORT_A, GPIO_PIN_01); SysTick_Delay(500); GPIO_SetPins(GPIO_PORT_A, GPIO_PIN_01); SysTick_Delay(500); //建议用Systick而不是Delay // DDL_DelayMS(500); &#125;&#125; 串口重定向 原理图 通用同步异步收发器（Universal Synchronous&#x2F;Asynchronous Receiver&#x2F;Transmitter ,USART） 通信模式 UART， 通用异步串行收发器 Multiprocessor， 多处理器操作 Smartcard， 智能卡 Clocksync， 时钟同步通信接口 重定向函数 123456789#include &lt;stdio.h&gt;int fputc(int ch, FILE *f)&#123; USART_WriteData(CM_USART2, (uint8_t)ch); while(DISABLE == USART_GetStatus(CM_USART2, USART_FLAG_TX_EMPTY)); return ch;&#125; 到这里没成功，后面不再用该版本的例程和官方自动生成代码的软件。很多驱动没有注明解释。 改用hc32f460_ddl_Rev1.3.1","categories":[],"tags":[]},{"title":"HC32F460JEUA-第0篇","slug":"HC32F460JEUA","date":"2023-12-12T07:43:19.000Z","updated":"2023-12-15T11:55:09.199Z","comments":true,"path":"2023/12/12/HC32F460JEUA/","permalink":"https://jianghe-jnhe.github.io/2023/12/12/HC32F460JEUA/","excerpt":"","text":"学习笔记时钟 API 驱动库及样例\\HC32F460_DDL_Rev3.2.0\\HC32F460_DDL_Rev3.2.0\\documents\\hc32f460_ddl_Rev3.2.0.chm XHCode 下载 https://www.xhsc.com.cn/Productlist/info.aspx?itemid=1849&amp;parent 使用 点灯 原理图-LED KEIL 计划 时钟配置 GPIO Output-LED Input-KEY Systick delay USART fputc-printf Interrupt USART-Tx TIMER base","categories":[],"tags":[]},{"title":"资料指南","slug":"Whoami","date":"2023-12-10T02:09:22.000Z","updated":"2023-12-10T05:30:14.687Z","comments":true,"path":"2023/12/10/Whoami/","permalink":"https://jianghe-jnhe.github.io/2023/12/10/Whoami/","excerpt":"","text":"学习经历2019级本科生：通信工程 2021年09月，通过网上找资料和修改引脚完成课程设计：《基于51单片机的倒车雷达系统设计》，制作视频教程与演示视频，上传B站。 2022年02月，在倒车雷达基础上，增加蓝牙遥控小车。制作视频教程、演示视频及资料分享，详见视频简介处，视频已上传B站。 2022年05月，通信工程综合实训，学习《基于ESP8266的物联网智能家居控制》软件开发。 2022年06月，参考网上开源项目，完成《基于ESP8266的太空人时钟小电视》，软硬件及模型已全部免费分享。 2022年11月，基本完成本科毕业设计，《机械臂定点坐标控制系统设计》，参考资料与来源均在B站视频简介处标明。 2023年01月，毕业设计:《机械臂定点坐标控制》全部资料分享出来，资料使用指南视频已上传B站，Gitee开源链接详见视频简介处。 2023年05月，Gitee使用指南。以如何下载倒车雷达资料为例讲解。 2023年05月，机械臂完整教程已上传B站。 2023年07月，考研已结束，实习已结束，大学已毕业，开始商业合作接单。 2023级研究生：仪器科学与技术 2023年09月，第一次尝试与公司商业合作：讲述自己入门单片机的经历，并为其公司推广产品。 2023年10月，开始一边学习一边在实验室打螺丝。 2023年10月，完成接单：《基于STM32的智能衣架控制系统设计》。 2023年11月，完成接单：《基于STM32的智能语音控制系统设计》。 20xx年xx月，持续更新ing。 免费资料个人说明本人之前也是小白，什么都不懂，关于51的视频中有一些理解错的地方，请大家主动学习、自主思考，这样才能学到知识；如果不想思考，直接用我的板子就可以了，资料已经很详细并全部分享到Gitee了，没有必要加我要资料；只有需要我帮你做的，可以B站@姜河jnhe私信我，获取联系方式。 关于STM32的机械臂，其实没啥亮点和实际意义，很多算法其实也都有现成的库调用，而我自己写的代码很垃圾，对单片机的理解也不深入，所以大家仅作学习了解；如果仅是需要资料，认真读一下资料获取指南，免费下载用，不用找我要资料。我目前不打算走这个方向，所以不会维护和深入学习。 关于ESP8266的学习资料，我没有分享出来，原因：1.资料过大，且可以在网上找得到；2.开发方式不是Arduion，而是在Windows下使用eclipse，参考ESP8266 SDK开发的，配置很麻烦。我其实不懂，只是跟着技新课堂的视频教程改内容，接入物联网云平台，就算分享给大家，大家也用不了。 其他没有分享出来的，一般是因为那不是我的代码而且我不懂，例如51开发板驱动PCA9685控制机械臂，它来自51黑电子。 资料列表 Gitee下载资料教程 【视频版】https://www.bilibili.com/video/BV1xg4y1j7yb 【文字版】https://www.cnblogs.com/jianghe414/p/17367884.html 《基于51单片机的倒车雷达系统设计》 https://gitee.com/jianghe2022/astern-radar_v2.0 【Gitee下载，全部资料且详细】 https://pan.baidu.com/s/13pzx1tSyKKvMlToUTtk5yQ?pwd=hphu 【网盘下载，未来可能会被清理，下同】 《基于51单片机的蓝牙遥控小车设计》 https://pan.baidu.com/s/1ZiIHiyQp0tu6oA9e6seHmA?pwd=5akx 《基于ESP8266的太空人时钟小电视》 https://pan.baidu.com/s/1qcza0wGSEP7XAkdA8VbwXg?pwd=wcxb 《基于STM32的机械臂定点坐标控制系统设计》 https://gitee.com/jianghe2022/arm-rot_v0.1 商业接单主营业务 单片机毕设、课设软硬件功能实现，论文免费指导； 为公司或企业实现项目功能； 为公司产品做推广视频、科普视频等。 联系方式 B站@姜河jnhe，通过私信方式，加联系方式详谈 https://space.bilibili.com/496375938 随便唠唠RTOS买块成本可接受的开发板，跟着网上的教程学。 LinuxWindows电脑安装虚拟机，虚拟机中安装Linux Ubuntu，Ubuntu中安装QEMU，模拟Linux开发板，不花钱跟着网上的教程学。 免费博客依托Gitee或Github，安装一些前端的工具和HEXO，免费搭建一个属于自己的技术博客，记录和复习自己学的内容，打造自己的名片。","categories":[],"tags":[]},{"title":"无线充电-发射端","slug":"RF-Transmitter","date":"2023-12-07T16:00:00.000Z","updated":"2023-12-08T11:19:11.034Z","comments":true,"path":"2023/12/08/RF-Transmitter/","permalink":"https://jianghe-jnhe.github.io/2023/12/08/RF-Transmitter/","excerpt":"","text":"个人日志 日期：2023年12月03日-2023年12月09日 理论准备 1.高频电子线路 选频网络 LC正弦波振荡器（三点式） 电容反馈三点式振荡器（考必兹Colpitts） 电感反馈三点式振荡器（哈特莱Hartley） 2.模拟电子技术 三极管 基本共射放大电路 放大电路中的反馈 3.电路分析基础 元件约束 电路约束 实践总结电路结构 1.放大电路（微小信号放大与维持振荡） 2.反馈网络（正反馈） 3.选频网络（确定频率与滤波；带通；二与三合一） 4.稳幅环节（分立电路不需要，依靠晶体管的非线性特性进行稳幅；动态平衡） 电路分析0.射同余异 发射极e-集电极c：C1（容性） 发射极e-基极b：C2（容性） 基极b-集电极c：L2（感性） 1.选频网络 发射频率 fc &#x3D; 166.9 kHz fc&#x3D;12πL(C1∥C2) 2.反馈网络 反馈量 10%（过大：正弦波形失真；过小：无法起振） 反馈量&#x3D;C1C2×100% 电路仿真1.仿真数据： 发射频率：159 kHz 峰-峰值：9.18 V 输出电压：3.3 V 输出功率：12.6 dB 2.仿真效果： 器件清单 器件 阻值 数量 C1 10nF 1 C2 100nF 1 C3、C4 1uF 2 C5 0.1uF 1 R1 10K 1 R2 4.7K 1 R3 1.5K 1 Q1 2N2222 1 L1 100uH 1 L2 300mH 1 个人反思本周总结","categories":[],"tags":[{"name":"RF","slug":"RF","permalink":"https://jianghe-jnhe.github.io/tags/RF/"}]},{"title":"初见博客","slug":"hello-world","date":"2023-12-04T05:40:39.955Z","updated":"2023-12-04T06:37:48.971Z","comments":true,"path":"2023/12/04/hello-world/","permalink":"https://jianghe-jnhe.github.io/2023/12/04/hello-world/","excerpt":"","text":"欢迎来到 Hexo！这是你的第一篇文章。查看文档了解更多信息。如果你在使用Hexo时遇到任何问题，你可以在故障排除中找到答案，或者你可以在GitHub上问我。 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 快速入门 Quick Start创建一个新帖 Create a new post1$ hexo new &quot;My New Post&quot; More info: Writing 运行网站服务 Run server1$ hexo server More info: Server 生成静态博客 Generate static files1$ hexo generate More info: Generating 部署到远程站点 Deploy to remote sites1$ hexo deploy More info: Deployment 参考教程文字版·基于Hexo的博客搭建：https://www.cnblogs.com/huanhao/p/hexobase.html视频版·基于Hexo的博客搭建：https://www.bilibili.com/video/BV1cW411A7Jx/","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"RF","slug":"RF","permalink":"https://jianghe-jnhe.github.io/tags/RF/"}]}