{"meta":{"title":"Jnhe","subtitle":"","description":"","author":"Jnhe","url":"https://jianghe-jnhe.github.io","root":"/"},"pages":[],"posts":[{"title":"","slug":"TTL-RS232-RS485","date":"2024-09-04T08:15:04.705Z","updated":"2024-08-27T09:16:51.309Z","comments":true,"path":"2024/09/04/TTL-RS232-RS485/","permalink":"https://jianghe-jnhe.github.io/2024/09/04/TTL-RS232-RS485/","excerpt":"","text":"TTL、RS232和RS485简介 TTL、RS232和RS485是三种不同的串行通信标准。 表格辨析 TTL RS232 RS485 数据接线 TXDRXD TXDRXDCTSRTS A+B- 逻辑电平 1：+2到+5V0：0V &#x3D;&#x3D;1：-3到-15&#x3D;&#x3D;&#x3D;&#x3D;0：+3到+15&#x3D;&#x3D; &#x3D;&#x3D;1：-2到-6&#x3D;&#x3D;&#x3D;&#x3D;0：+2到+6&#x3D;&#x3D; 通信方式 全双工 全双工 &#x3D;&#x3D;半双工&#x3D;&#x3D; 通信数量 点对点 点对点 &#x3D;&#x3D;多点&#x3D;&#x3D; 抗干扰性 差 强 很强（&#x3D;&#x3D;差分信号&#x3D;&#x3D;） 通信距离 较短，通常在1米以内 一般不超过20m 可达几十米到上千米 通信速率 取决于具体应用，可高速 最高19.2Kbps 最高10Mbps 应用场景 嵌入式系统内部通信 计算机、调制解调器、打印机等 工业自动化、智能楼宇等 TTL逻辑电平： 逻辑0：输出低电平&lt;0.4V, 输入低电平&lt;&#x3D;0.8V； 逻辑1：输出高电平&gt;2.4V,输入高电平&gt;&#x3D;2.0V。 TTL转RS232 TTL转RS485 原理 5分钟看懂!串口RS232 RS485最本质的区别！ @爱上半导体","categories":[],"tags":[]},{"title":"","slug":"SerialNote","date":"2024-09-04T08:15:04.701Z","updated":"2024-09-02T02:52:30.967Z","comments":true,"path":"2024/09/04/SerialNote/","permalink":"https://jianghe-jnhe.github.io/2024/09/04/SerialNote/","excerpt":"","text":"单片机串口通用收发功能笔记接收单字节数据前期准备 标准库：用户已经配置好串口的时钟、引脚（MSP层）和UART参数设置，已经配置串口中断； HAL库：使用CubeMX或CubeIDE已经配置好串口的时钟、引脚（MSP层）和UART参数设置，已经配置串口中断； 1234567891011/* 标准库 能够接收1个字节的数据 */uint8_t my_rx_data; //定义串口接收的数据变量void USART1_IRQHandler(void)&#123; if (USART_GetITStatus(USART1, USART_IT_RXNE) == SET) &#123; my_rx_data = USART_ReceiveData(USART1); USART_ClearITPendingBit(USART1, USART_IT_RXNE); &#125;&#125; 12345678910111213141516171819202122/* HAL库 能够接收1个字节的数据 *///main.cuint8_t my_rx_data; //定义串口接收的数据变量int main(void)&#123; HAL_UART_Receive_IT(&amp;huart1,&amp;my_rx_data,1); while(1) &#123; &#125;&#125;void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)&#123; if(huart == &amp;huart1) &#123; //接收数据 HAL_UART_Receive_IT(&amp;huart1, &amp;my_rx_data, 1); &#125;&#125; 推荐教程 标准库串口收发教程·江协科技 https://www.bilibili.com/video/BV1th411z7sn?p=27 HAL库串口收发教程·keysking https://www.bilibili.com/video/BV1bc411J7Tv/ 接收多个数据 定义一个固定长度的全局数组或字符串； 定义一个用于记录接收数据长度的变量，初试为0，接收累加； 标准库-WIFI为例12345/* .h文件 */#define ESP01S_RX_BUF_MAX_LEN 1024 extern char esp01s_rx_buf[];extern uint16_t esp01s_rx_buf_len;extern uint8_t esp01s_rx_data; 1234567891011121314151617181920/* .c文件 */char esp01s_rx_buf[ ESP01S_RX_BUF_MAX_LEN ];uint16_t esp01s_rx_buf_len = 0;uint8_t esp01s_rx_data;void USART1_IRQHandler(void)&#123; if (USART_GetITStatus(USART1, USART_IT_RXNE) == SET) &#123; esp01s_rx_data = USART_ReceiveData(USART1); if( esp01s_rx_buf_len &lt; (ESP01S_RX_BUF_MAX_LEN-1) ) &#123; esp01s_rx_buf[esp01s_rx_buf_len] = esp01s_rx_data; esp01s_rx_buf_len++; &#125; USART_ClearITPendingBit(USART1, USART_IT_RXNE); &#125;&#125; HAL库-SCPI为例1234#define EL_RX_BUF_MAX_LEN 1024extern char el_rx_buf[];extern uint16_t el_rx_buf_len;extern uint8_t el_rx_data; 1HAL_UART_Receive_IT(&amp;huart1,&amp;el_rx_data,1); 123456789101112131415161718char el_rx_buf[EL_RX_BUF_MAX_LEN];uint16_t el_rx_buf_len = 0;uint8_t el_rx_data = 0;void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)&#123; if(huart == &amp;huart1) &#123; //接收电子负载的数据 if( el_rx_buf_len &lt; (EL_RX_BUF_MAX_LEN-1) ) &#123; //接收到1个数据，存入 el_rx_buf[el_rx_buf_len] = el_rx_data; el_rx_buf_len++; &#125; HAL_UART_Receive_IT(&amp;huart1, &amp;el_rx_data, 1); &#125;&#125; 以上逻辑同样适用于其他数据接收 接收整个对象 前提：接收的内容格式是制定好的。 按照制定的协议，定义全局结构体，结构体成员为各部分数据； 帧头 模式 长度 数据 CRC 帧尾 0xAA 0x01 | 0x02 0x03 X Y Z 模式+长度+数据 0xFE 123456789101112131415161718#define FRAME_HEAD 0xAA#defien FRAME_TAIL 0xFE// 定义全局结构体typedef struct &#123; uint8_t mode; uint8_t data_len; uint16_t X_axis; uint16_t Y_axis; uint16_t Z_axis; uint8_t CRC_8;&#125; GetData;// 声明全局变量extern GetData g_Get_Data;uint8_t Calculate_CRC8(uint8_t *pData, uint8_t Size);int get_data_from_uart(uint8_t uart_data, uint16_t data_len); 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192uint8_t uart1_rx_data; //定义串口接收的数据变量void USART1_IRQHandler(void)&#123; static uint8_t RxState = 0; //定义表示当前状态机状态的静态变量 static int err; if (USART_GetITStatus(USART1, USART_IT_RXNE) == SET) &#123; uart1_rx_data = USART_ReceiveData(USART1); /*当前状态为0，接收数据包包头*/ if (RxState == 0) &#123; if (RxData == FRAME_HEAD) //如果数据确实是包头 &#123; RxState = 1; //置下一个状态 uart1_rx_buf_len = 0; //数据包的位置归零 &#125; &#125; /*当前状态为1，接收数据包数据*/ else if (RxState == 1) &#123; //这里接收全部数据 uart1_rx_buf[uart1_rx_buf_len] = uart1_rx_data; //将数据存入数据包数组的指定位置 uart1_rx_buf_len ++; //数据包的位置自增 if (uart1_rx_buf_len &gt;= 1 + 1 + uart1_rx_buf[1] + 1) &#123; RxState = 2; //置下一个状态 &#125; &#125; /*当前状态为2，接收数据包包尾*/ else if (RxState == 2) &#123; if (uart1_rx_data == FRAME_TAIL) //如果数据确实是包尾部 &#123; //数组中接收完成,放入结构体 err = get_data_from_uart(uart1_rx_buf, uart1_rx_buf_len); if(err) &#123; //CRC错误 &#125; else &#123; RxState = 0; //状态归0 Serial_RxFlag = 1; //接收数据包标志位置1，成功接收一个数据包 &#125; &#125; &#125; USART_ClearITPendingBit(USART1, USART_IT_RXNE); &#125;&#125;int get_data_from_uart(uint8_t uart_data, uint16_t data_len)&#123; g_Get_Data.mode = uart_data[0]; g_Get_Data.data_len = uart_data[1];// g_Get_Data.X_axis = uart_data[2] uart_data[3];// g_Get_Data.Y_axis = uart_data[4] uart_data[5];// g_Get_Data.Z_axis = uart_data[6] uart_data[7]; g_Get_Data.CRC_8 = Calculate_CRC8(uart_data,data_len-1); if( g_Get_Data.CRC_8^uart_data[data_len-1]) &#123; return 1;//err &#125; return 0;&#125;uint8_t Calculate_CRC8(uint8_t *pData, uint8_t Size)&#123; unsigned char i; unsigned char rCRC = 0; unsigned char CRC_8_POLYNOMIAL = 0x29; while(Size--) &#123; rCRC ^= *pData++; for(i=8; i&gt;0; --i) &#123; if(rCRC &amp; 0x80) &#123; rCRC = (rCRC &lt;&lt; 1) ^ CRC_8_POLYNOMIAL; &#125;else &#123; rCRC =(rCRC &lt;&lt; 1); &#125; &#125; &#125; return(rCRC);&#125;","categories":[],"tags":[]},{"title":"新年目标","slug":"myGoal","date":"2023-12-31T16:00:00.000Z","updated":"2023-12-31T09:41:18.367Z","comments":true,"path":"2024/01/01/myGoal/","permalink":"https://jianghe-jnhe.github.io/2024/01/01/myGoal/","excerpt":"","text":"当前阶段 课程 通过所有课程考试，顺利毕业即可 加权平均达到75分，不追求奖学金 技能 单片机学习与实践 ARM学习与实践 OS学习与实践 完成相关工作 做笔记写博客 证书 CET-6 健康 每周五晚跑步","categories":[],"tags":[]},{"title":"主控芯片","slug":"myMCU","date":"2023-12-31T08:45:56.000Z","updated":"2023-12-31T09:13:10.571Z","comments":true,"path":"2023/12/31/myMCU/","permalink":"https://jianghe-jnhe.github.io/2023/12/31/myMCU/","excerpt":"","text":"中心 STM32F103C8T6 72MHz，20k，64k，48pin ARM Cortex-M3 STM32F103C8T6最小系统板 低端 低功耗 STM32F030C8T6 48MHz，8k，64k，48pin ARM Cortex-M0 APM32F030C8T6 48MHz，8k，64k，48pin 极海半导体 实习项目 高端 高主频 STM32F427ZGT6 240MHz，256k，1M，144pin ARM Cortex-M4 GD32F450ZGT6 180Mhz，256k，1M，144pin ARM Cortex-M4 兆易创新 梁山派 HC32F460JEUA 200MHz，192k，512k，48pin ARM Cortex-M4 小华半导体 实验室项目 架构 RISC-V CH32V307VCT6 144MHz，64k，256k，100pin 沁恒微电子 青稞RISC-V通用型开发板 ESP32 WiFi+BlueTooth 智能家居 ESP8266 WiFi 智能家居 IDE Eclipse VSCode Linux makefile（非IDE）","categories":[],"tags":[]},{"title":"资料指南","slug":"Whoami","date":"2023-12-10T02:09:22.000Z","updated":"2024-03-24T06:34:52.125Z","comments":true,"path":"2023/12/10/Whoami/","permalink":"https://jianghe-jnhe.github.io/2023/12/10/Whoami/","excerpt":"","text":"学习经历2019级本科生：通信工程 2021年09月，通过网上找资料和修改引脚完成课程设计：《基于51单片机的倒车雷达系统设计》，制作视频教程与演示视频，上传B站。 2022年02月，在倒车雷达基础上，增加蓝牙遥控小车。制作视频教程、演示视频及资料分享，详见视频简介处，视频已上传B站。 2022年05月，通信工程综合实训，学习《基于ESP8266的物联网智能家居控制》软件开发。 2022年06月，参考网上开源项目，完成《基于ESP8266的太空人时钟小电视》，软硬件及模型已全部免费分享。 2022年11月，基本完成本科毕业设计，《机械臂定点坐标控制系统设计》，参考资料与来源均在B站视频简介处标明。 2023年01月，毕业设计:《机械臂定点坐标控制》全部资料分享出来，资料使用指南视频已上传B站，Gitee开源链接详见视频简介处。 2023年05月，Gitee使用指南。以如何下载倒车雷达资料为例讲解。 2023年05月，机械臂完整教程已上传B站。 2023年07月，考研已结束，实习已结束，大学已毕业，开始商业合作接单。 2023级研究生：仪器科学与技术 2023年09月，第一次尝试与公司商业合作：讲述自己入门单片机的经历，并为其公司推广产品。 2023年10月，开始一边学习一边在实验室打螺丝。 2023年10月，完成接单：《基于STM32的智能衣架控制系统设计》。 2023年11月，完成接单：《基于STM32的智能语音控制系统设计》。 2023年12月，完成接单：《基于STM32的热控制搅拌杯系统设计》。 2024年03月，完成接单：《基于STM32的遥控机械臂控制系统设计》。 20xx年xx月，持续更新ing。 免费资料个人说明本人之前也是小白，什么都不懂，关于51的视频中有一些理解错的地方，请大家主动学习、自主思考，这样才能学到知识；如果不想思考，直接用我的板子就可以了，资料已经很详细并全部分享到Gitee了，没有必要加我要资料；只有需要我帮你做的，可以B站@姜河jnhe私信我，获取联系方式。 关于STM32的机械臂，其实没啥亮点和实际意义，很多算法其实也都有现成的库调用，而我自己写的代码很垃圾，对单片机的理解也不深入，所以大家仅作学习了解；如果仅是需要资料，认真读一下资料获取指南，免费下载用，不用找我要资料。我目前不打算走这个方向，所以不会维护和深入学习。 关于ESP8266的学习资料，我没有分享出来，原因：1.资料过大，且可以在网上找得到；2.开发方式不是Arduion，而是在Windows下使用eclipse，参考ESP8266 SDK开发的，配置很麻烦。我其实不懂，只是跟着技新课堂的视频教程改内容，接入物联网云平台，就算分享给大家，大家也用不了。 其他没有分享出来的，一般是因为那不是我的代码而且我不懂，例如51开发板驱动PCA9685控制机械臂，它来自51黑电子。 资料列表 Gitee下载资料教程 【视频版】https://www.bilibili.com/video/BV1xg4y1j7yb 【文字版】https://www.cnblogs.com/jianghe414/p/17367884.html 《基于51单片机的倒车雷达系统设计》 https://gitee.com/jianghe2022/astern-radar_v2.0 【Gitee下载，全部资料且详细】 https://pan.baidu.com/s/13pzx1tSyKKvMlToUTtk5yQ?pwd=hphu 【网盘下载，未来可能会被清理，下同】 《基于51单片机的蓝牙遥控小车设计》 https://pan.baidu.com/s/1ZiIHiyQp0tu6oA9e6seHmA?pwd=5akx 《基于ESP8266的太空人时钟小电视》 https://pan.baidu.com/s/1qcza0wGSEP7XAkdA8VbwXg?pwd=wcxb 《基于STM32的机械臂定点坐标控制系统设计》 https://gitee.com/jianghe2022/arm-rot_v0.1 商业接单主营业务 单片机毕设、课设软硬件功能实现，论文免费指导； 为公司或企业实现项目功能； 为公司产品做推广视频、科普视频等。 联系方式 B站@姜河jnhe，通过私信方式，加联系方式详谈 https://space.bilibili.com/496375938 随便唠唠RTOS买块成本可接受的开发板，跟着网上的教程学。 LinuxWindows电脑安装虚拟机，虚拟机中安装Linux Ubuntu，Ubuntu中安装QEMU，模拟Linux开发板，不花钱跟着网上的教程学。 免费博客依托Gitee或Github，安装一些前端的工具和HEXO，免费搭建一个属于自己的技术博客，记录和复习自己学的内容，打造自己的名片。","categories":[],"tags":[]},{"title":"初见博客","slug":"hello-world","date":"2023-12-04T05:40:39.955Z","updated":"2023-12-04T06:37:48.971Z","comments":true,"path":"2023/12/04/hello-world/","permalink":"https://jianghe-jnhe.github.io/2023/12/04/hello-world/","excerpt":"","text":"欢迎来到 Hexo！这是你的第一篇文章。查看文档了解更多信息。如果你在使用Hexo时遇到任何问题，你可以在故障排除中找到答案，或者你可以在GitHub上问我。 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 快速入门 Quick Start创建一个新帖 Create a new post1$ hexo new &quot;My New Post&quot; More info: Writing 运行网站服务 Run server1$ hexo server More info: Server 生成静态博客 Generate static files1$ hexo generate More info: Generating 部署到远程站点 Deploy to remote sites1$ hexo deploy More info: Deployment 参考教程文字版·基于Hexo的博客搭建：https://www.cnblogs.com/huanhao/p/hexobase.html视频版·基于Hexo的博客搭建：https://www.bilibili.com/video/BV1cW411A7Jx/","categories":[],"tags":[]}],"categories":[],"tags":[]}